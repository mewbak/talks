Pearl
Tor relay implementation in Golang
31 Oct 2017

Michael McLoughlin
Software Engineer, Uber
mmcloughlin@gmail.com
http://mmcloughlin.com
@mbmcloughlin

* Background

Motivations:

- Learn about the Tor protocol
- Learn by doing!
- Goaded by a glib writeup of a [[https://tvdw.eu/blog/2015/01/24/implementing-a-tor-relay-from-scratch/][previous Go implementation]]
- "After a while I realized the language was not suited for the project"

Thus pearl was born out of _hubris_ on my part.

- Bradfield Sabbatical Program was a great way to revive my project
- Turns out it's non-trivial

* Tor network enables anonymous internet access

.image assets/tornet-blank.svg 460 _

* Clients send traffic via a circuit

.image assets/tornet-circuit.svg 460 _

3-hop circuits consist of: *guard* (red), *middle* (green) and *exit*.

* Circuit initiated with a CREATE command

.image assets/tornet-create.svg 460 _

Shared secrets established for symmetric encryption.

* Circuit extended with RELAY_EXTEND

.image assets/tornet-extend.svg 460 _

Relay to _green_ node without green knowing the gopher's location.

* Repeated to complete 3-hop circuit

.image assets/tornet-extend2.svg 460 _

Now streams can be established on the circuit.

* Data can now be relayed

.image assets/tornet-data0.svg 460 _

* Each node removes its layer of encryption

.image assets/tornet-data1.svg 460 _

* It's like peeling and onion...

.image assets/tornet-data2.svg 460 _

* Exit node sees the actual packet

.image assets/tornet-data3.svg 460 _

* The crux of a relay implementation

mux/demux

* Why Go?

Strikes a sweet spot

- Fast statically typed compiled language
- Feels like writing in a dynamic language
- Strong tooling, standard libary and ecosystem

Concurrency features:

- *Goroutines:* "green threads" mapped to OS threads, running ~100k is reasonable
- *Channels:* send and receive operations between goroutines

Gained a reputation for:

- Systems programming
- High performance servers

* Why not?

Tom van der Woerdt had [[https://tvdw.eu/blog/2015/01/24/implementing-a-tor-relay-from-scratch/][harsh criticisms]]:

- Limited cipher suites and poor performance of `crypto/tls`
- Hence forced to use C bindings to `openssl`
- Blamed `cgo` for buildup of OS threads and excessive locking
- Memory usage per connection: 16KB buffer plus 4KB goroutine stack
- Buffered channel: static array implementation causes high memory usage

Maybe we can avoid these problems now:

- `crypto/tls` has massively improved
- Memory problems result from _design_decisions_

* Challenges

* Current Status

.image assets/works-on-my-machine.png 500 _

* It's gone viral

.image assets/tweet.png

(Not quite. I did crash the tor metrics system though.)

* Accepted into consensus

  $ wget http://86.59.21.38/tor/server/all
  $ cat all
  router pearl000 35.203.138.1 9001 0 0
  signing-key
  -----BEGIN RSA PUBLIC KEY-----
  MIGJAoGBAKzTaN4tZGv1kiQWBzeuOk+ovr2LtIURlaVC38j6j/fQuYfuAZX/XvV1
  fQr9EVh+T617dh+frt2D0QDuzLUvP3hpgVozW94w+Ib85pUCne03f4rj3QYu5Qtg
  GvzShslZI6vgyy0g2jAOGa4jxT/UYAcKE5dQo8CBKA6Qb0P5Joc1AgMBAAE=
  -----END RSA PUBLIC KEY-----
  fingerprint 6832 5B4B 1E17 7374 B84D 372F 0304 6351 BEE7 FF6A
  ...
  platform Pearl cfaf5d6 on Linux
  contact pearl@m15n.org https://github.com/mmcloughlin/pearl
  ...

* Pearl node running in the Tor network

.image assets/atlas-screenshot.png 500 _

* Future Work

There is _a_long_way_ to go.

Near term:

- Nurse *production* deployment
- Develop more realistic local *testing*
- Focus on *performance*
- Revisit *parser*

Longer term expand protocol support:

- Exit node, client side, hidden services...

Alternatively:

- Contribute to new [[https://github.com/go-tor][go-tor project]] or the [[https://www.torproject.org/][official tor project]]

* Acknowledgements

- *Myles* for our daily check-in and keeping me on the straight and narrow
- *Oz* and *Myles* for setting up the program
- *Bradfield*Sabbatical*Program* for the community and emotional suport
- *Uber* for letting me participate
